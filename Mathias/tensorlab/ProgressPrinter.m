classdef ProgressPrinter < handle
%PROGRESSPRINTER Progress display class for optimization routines.
%   PROGRESSPRINTER is class that is used to print the progress and the termination message for an
%   optimization algorithm. This class prints the results to the command window with a repeating
%   header every HEADERREPEAT iterations and displays the termination criterion as a clickable link,
%   showing the tracked fields.
%   
%   PROGRESSPRINTER(DISPLAY) sets the display option such that every DISPLAY iteration, the tracked
%   fields are printed. If DISPLAY = 0, nothing is printed.
%   
%   The following fields can be used to customize the output:
%   
%   - Display                 Display every x iterations
%   - HeaderRepeat            Repeat header every x rows 
%   - ShowConvergenceCurves   Plot convergence curves every DISPLAY iterations
%   
%   The following functions are available:
%   
%   - addField                Add a new field (column) to the printer
%   - print                   Print the output, if applicable based on display
%   - plot                    Plot converges curves (called in print if applicable)
%   - printTermination        Print termination message and generate plot
%   
%   Typical (internal) use case in optimization routine:
%
%       printer = ProgressPrinter(10); % Display every 10 iterations 
%       % Add relfval column of width 15, format number as x.xxxe-xxx, print tolerance, and plot
%       printer.addField('relfval', 'relfval', '%-15s', '%14.8e', TolFun, 'TolFun=%s', true);
%       % output is generated by the optimization algorithm
%       printer.print(output);
%       % print termination message
%       printer.printTermination(output);
%
%   Notes on output:
% 
%   1. The struct output has at least the fields iteration and info. 
%   2. Only fields defined using addField are printed. 
%   3. If a field is a matrix, all values in the last column are printed. 

%   Authors: Nico Vervliet       (Nico.Vervliet@kuleuven.be)
%            Lieven De Lathauwer (Lieven.DeLathauwer@kuleuven.be)
%
% Version History:
% - 2018/04/09    NV    Initial version 
    
    properties
        % Display a row every x iterations. 
        Display      = 0;
        
        % Number of rows after which the header is repeated. 
        HeaderRepeat = 15;
        
        % Show convergence curves in graph. (Can be slow!)
        ShowConvergenceCurves = false;
    end 
    
    properties (Access = protected)
        % String to print bold, if the matlab version allows this. 
        BoldString   = '%s';    
        
        % Fields to be displayed
        %   Fields is a struct array containing the following fields:
        %   - property:   The field in the output structure to be printed
        %   - title:      The name of the field to be printed
        %   - fmttitle:   The format of the title to be printed, which has to be of the form
        %                 '%-NUMs', in which NUM is the width of the column, - ensures left
        %                 alignment (remove for right alignment). For example: %-20s.
        %   - fmtval:     The format for the value to be printed
        %   - subtitle:   Optional line below the title
        %   - tolerance:  Tolerance used for this field, if applicable.
        %   - doplot:     Plot in termination plot
        %   - strings:    List of strings which are selected based upon the value
        fields
    end 
    
    methods 
        
        function this = ProgressPrinter(Display, HeaderRepeat, ShowConvergenceCurves)
        %PROGRESSPRINTER Create new progress printer. 
        %   PRINTER = PROGRESSPRINTER(DISPLAY, HEADERREPEAT, SHOWCONVERGENCECURVES) creates a new printer
        %   object for printing the progress of an optimization routine. Every DISPLAY iterations, a
        %   progress row is printed. Set DISPLAY to zero (default) to disable printing
        %   completely. Every HEADERREPEAT printed rows, the header is printed agains (default:
        %   15). If SHOWCONVERGENCECURVES is true, a plot with the convergence curves is shown as
        %   well. Note: this can be slow. (Default: false).
            
            if nargin < 1, Display = 0; end
            if nargin < 2, HeaderRepeat = 15; end
            if nargin < 3, ShowConvergenceCurves = false; end
            this.Display = Display;
            this.HeaderRepeat = HeaderRepeat;
            this.ShowConvergenceCurves = ShowConvergenceCurves;
            
            [~,~,~,~,v] = regexp(version('-release'),'([0-9]+)([ab])');
            if usejava('Desktop') && str2double(v{1}{1}) > 2011 || ...
               (str2double(v{1}{1}) == 2011 && strcmpi(v{1}{2},'b'))
                this.BoldString = '<strong>%s</strong>';
            end
        end 
        
        function addField(this, varargin)
        %ADDFIELD Add a new field (column) to be printed. 
        %   ADDFIELD(PROP, TITLE, FMTTITLE, FMTVAL) adds a single property PROP, which should match a field
        %   in the output structure supplied by the optimization routine, as a column to the
        %   printer. The TITLE field is printed in the header using the format function FMTTITLE,
        %   which should accept the TITLE string and specify a width and a minus sign can be used to
        %   specify left alignment of the text; for example, '%-20s' for a column width of 20 and
        %   left adjusted text. FMTVAL defines the format for the printed value of this
        %   property. Note that the format should be chosen such that the width matches the width of
        %   the title.
        %
        %   ADDFIELD(..., SUBTITLE, FMTSUBTITLE) additionally defines a SUBTITLE and a format. If
        %   the formatted title is shorter than the TITLE, the column width is adjusted
        %   automatically; otherwise, the columns do not align. If SUBTITLE is a numerical value, it
        %   is enterpreted as a tolerance which is plotted in the termination plot.
        %
        %   ADDFIELD(..., VALUES) additionaly defines a cell of entry which are printed instead
        %   of the value presented, e.g., a list of strings.

            if isnumeric(varargin{1})
                if varargin{1} < numel(this.fields)
                    k = varargin{1} + 1;
                    this.fields = this.fields([1:k k:end]);
                else 
                    k = numel(this.fields) + 1; 
                end 
                varargin = varargin(2:end);
            else 
                k = numel(this.fields) + 1; 
            end 
            if numel(varargin) < 4, error('Not enough input arguments.'); end 
            property = varargin{1}; 
            title    = varargin{2};
            fmttitle = varargin{3}; 
            fmtval   = varargin{4}; 
            if numel(varargin) >= 5, 
                subtitle = varargin{5}; 
                fmtsubtitle = '';
            else 
                subtitle    = '';
                fmtsubtitle = '';
            end 
            if numel(varargin) >= 6, 
                fmtsubtitle = varargin{6}; 
            end 
            doplot  = numel(varargin) >= 7 && varargin{7};
            if numel(varargin) < 8, values = {};
            else values = varargin{8}; end
            
            % Property to print = value
            this.fields(k).property = property;
            
            % Extract width of field 
            width = regexp(fmttitle, '-?[0-9]+', 'match');
            if isempty(width)
                error('No width specified.');
            end  
            width = str2double(width{1}); 
            this.fields(k).width = width;
            % Adjust format string for title and create title 
            if ~strcmpi(this.BoldString, '%s')
                spaces = repmat(' ', 1, max(0, abs(width) - numel(title)));
                if width < 0, fmttitle = [fmttitle, spaces];
                else fmttitle = [spaces, fmttitle]; end 
            end 
            this.fields(k).title = sprintf(fmttitle, sprintf(this.BoldString,title));
            
            % Create subtitle 
            if isnumeric(subtitle) && isscalar(subtitle) && isfinite(subtitle)
                this.fields(k).tolerance = subtitle;
            else 
                this.fields(k).tolerance = nan;
            end 
            subtitle = sprintf(fmtsubtitle, subtitle);
            if numel(subtitle) < abs(width)
                spaces = repmat(' ', 1, max(0, abs(width) - numel(subtitle)));
                if width < 0, subtitle = [subtitle, spaces];
                else subtitle = [spaces, subtitle]; end 
            end 
            this.fields(k).subtitle = subtitle;
            
            % Store format for value 
            this.fields(k).fmtval = fmtval;
            
            % Plot in termination?
            this.fields(k).plot = doplot;
            
            % List of values
            this.fields(k).values = values;
        end 
        
        function print(this, output, printfields)
        %PRINT Print a new progress line.
        %   PRINT(OUTPUT) prints a new progress line based on the fields in OUTPUT structure. Only the last
        %   value of the fields defined in this printer that are also in OUTPUT are printed. If a
        %   field is a matrix, the last column is printed using the defined format vector. 
        %
        %   PRINT(OUTPUT, PRINTFIELDS) prints only the fields (property) defined in the cell of
        %   strings PRINTFIELDS.
            
            if nargin < 3, printfields = []; end
            if this.Display <= 0, return; end
            if mod(output.iterations,this.Display)>0 && output.info==0 && output.iterations > 0
                return;
            end 
            
            fields = this.fields;
            
            % determine length of iteration index
            maxit = max(ceil(log10(ceil(output.iterations / this.HeaderRepeat*this.Display))), 4);
            % Print header if necessary
            if output.iterations == 0 || mod(output.iterations,this.HeaderRepeat*this.Display) == 0
                % print title 
                fprintf('\n');
                fprintf('%s', repmat(' ', 1, maxit + 3));
                for k = 1:numel(fields)
                    f = fields(k);
                    if isfield(output, f.property) 
                        fprintf(f.title);
                        fprintf('  ');
                    end 
                end 
                % print subtitle 
                fprintf('\n');
                fprintf('%s', repmat(' ', 1, maxit + 3));
                for k = 1:numel(fields)
                    f = fields(k);
                    if isfield(output, f.property)
                        fprintf(f.subtitle);
                        fprintf('  ');                                        
                    end 
                end 
                fprintf('\n\n');
            end 
                        
            % Print value
            fprintf(sprintf('%%%dd:  ', maxit), output.iterations);
            printsep = false;
            for k = 1:numel(fields)
                f = fields(k);
                if ~isfield(output, f.property), continue; end
                if ~isempty(printfields) && ~any(strcmpi(printfields, f.property)), continue; end
                if printsep, fprintf(' | '); end
                v = output.(f.property);
                if numel(v) > 0
                    if ~isempty(f.values)
                        try 
                            fprintf(f.fmtval, f.values{v(end)});
                        catch 
                            fprintf(f.fmtval, 'nan');
                        end 
                    elseif isvector(v)
                        fprintf(f.fmtval, v(end));
                    else
                        fprintf([f.fmtval, '  '], v(:,end));
                    end 
                end 
                printsep = true;
            end 
            fprintf('\n');
            
            if this.ShowConvergenceCurves, this.plot(output); end
        end 
        
        function plot(this, output)
        %PLOT Plot convergence curves.
        %   PLOT(OUTPUT) plots convergence curves and tolerances based on the fields in OUTPUT
        %   structure. Only the last value of the fields defined in this printer that are also in
        %   OUTPUT are printed.
            
            if this.Display <= 0, return; end
            if mod(output.iterations,this.Display)>0 && output.info==0 && output.iterations > 0
                return;
            end 

            % Clear current figure, but do not make a new one. 
            clf;
            fields = this.fields([this.fields.plot]); 
            fields = {fields.property};
            
            lgd  = {}; % legend entries 
            lgdh = []; % legend handles
            cidx = 1;  % color index
            if output.iterations <= 25, style = '.-'; 
            else style = '-'; end
            
            % Plot curves and tolerances
            for k = 1:numel(fields)
                if ~isfield(output, fields{k}) || isempty(output.(fields{k})), continue; end
                v = output.(fields{k});
                x = output.iterations - numel(v)+1:output.iterations;
                x(isnan(v)) = [];
                v(isnan(v)) = [];
                % plot and legend
                lgdh(end+1) = semilogy(x.', v.', style);
                lgd{end+1} = fields{k};
                % tolerances
                if cidx == 1; hold on; end
                fidx = find(strcmpi(fields{k}, {this.fields.property}),1);
                if ~isempty(fidx) && isfinite(this.fields(fidx).tolerance)
                    tol = this.fields(fidx).tolerance;
                    set(gca,'ColorOrderIndex',cidx);
                    semilogy([0 output.iterations],[tol tol],'--');
                end 
                cidx = cidx + 1;
            end 
            legend(lgdh, lgd{:});
            xlabel('Iteration k');
            drawnow;
        end 
        
        function printTermination(this, output)
        %PRINTTERMINATION Print termination reason. 
        %   PRINTTERMINATION(OUTPUT) prints the reason of termination based on the info field in OUTPUT. If
        %   the command window is capable of printing links, a link generating a figure with
        %   convergence curves and tolerances is created.
            
            if this.Display == 0; return; end
            ahref = '\n%s\n\n';
            if length(this.BoldString) > 2
                fields = this.fields([this.fields.plot]); 
                fields = {fields.property};
                cmd = 'clf;'; cmd2 = ''; lgd = ''; 
                cidx = 1;
                if output.iterations <= 25, style = '.-'; 
                else style = '-'; end
                for k = 1:numel(fields)
                    if ~isfield(output, fields{k}) || isempty(output.(fields{k})), continue; end
                    v = output.(fields{k});
                    x = output.iterations - numel(v)+1:output.iterations;
                    x(isnan(v)) = [];
                    v(isnan(v)) = [];
                    cmd = sprintf('%ssemilogy(%s,%s,''%s'');', cmd, mat2str(x'), mat2str(v'), style);
                    if cidx == 1; cmd = [cmd, 'hold on;']; end
                    if ~isempty(lgd), lgd = [lgd, ',']; end
                    lgd = sprintf('%s''%s''', lgd, fields{k});
                    fidx = find(strcmpi(fields{k}, {this.fields.property}),1);
                    if ~isempty(fidx) && isfinite(this.fields(fidx).tolerance)
                        tol = this.fields(fidx).tolerance;
                        cmd2 = sprintf('%sset(gca,''ColorOrderIndex'',%d);semilogy([0 %d],[%d %d],''--'');', ...
                                       cmd2, cidx, output.iterations, tol, tol);
                    end 
                    cidx = cidx + 1;
                end 

                cmd = sprintf('%s;%slegend(%s);xlabel(''Iteration k'');', cmd, cmd2, lgd);
                
                ahref = sprintf('\n<a href="matlab:%s">%%s</a>\n\n',cmd);
            end
            switch output.info
              case 1, fprintf(ahref,'Objective function tolerance reached.');
              case 2, fprintf(ahref,'Step size tolerance reached.');
              case 3, fprintf(ahref,'Maximum number of iterations reached.');
              case 4, fprintf(ahref,'Absolute objective function tolerance reached.');        
              case 5, fprintf(ahref,'Measure tolerance reached.');
            end
        end 
        
    end 
    
    
end 