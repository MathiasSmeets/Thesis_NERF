function Neurons = create_neuDB(spikeDB, eventDB, trialLength, minstimdur, interval)

% create a DB of clusters/neurons with infos and PSTH locked to the events
% saved into the events file
%
% Inputs:
%   - spikeDB = name of the experiment (Should be the first part of the
%   spikesDB example 'Experiment1' for 'Experiment1_MUA and
%   Experiment1_Good', as generated by KwikImport() )
%   - eventDB = structure continining the events/stimulation, as generated
%   by preprocess_openephys_recording()
%   - trialLength = time considered around the stim (default 400 ms)
%   - minstimdur = minimum duration of stimulation periods (used to
%   identified artifacts)
%
% Mattia D'Andola

if nargin < 3
    trialLength = 200;
end
if nargin <4
    minstimdur = [];
end

if nargin < 5
    interval = [50 150]; %ms
end

%load spike data
DBGood = load([spikeDB '_Good.mat']);
DBMua = load([spikeDB '_MUA.mat']);

%load events data
if ischar(eventDB)
    load(eventDB)
elseif isstruct(eventDB)
    events = eventDB;
end

neusGood = unique(DBGood.spikes(:,2));
neusMua = unique(DBMua.spikes(:,2));

cont = 0;
slidingWindow = ones(1,25);
for n = 1:length(neusGood)
    disp(sprintf('analyzing neu %d', n))
    cont = cont+1;
    
    %get index of spikes for each cluster/neuron
    neuIdx = DBGood.spikes(:, 2) == neusGood(n); 
    neuSpk = DBGood.spikes(neuIdx, 1);
    SpikeTime{cont} = neuSpk;
    neuSpk = DBGood.spikes(neuIdx, 1)*1000;

    
    tmpResp = zeros(length(events.onsets), trialLength);
    
    %get onsets and offsets of stimulation events
    onset = events.onsets*1000;
    offset = events.offsets*1000;
    
    %eliminate artifacts (identified as stim picks with a duration <
    %minstimdur)
    if ~isempty(minstimdur)
        testdur = offset - onset;
        idx = find(testdur > minstimdur);
        onset = onset(idx);
        offset = offset(idx);
    end
    

    %find spikes in the interval onset-50 ms and offset+150 ms
    for i = 1:length(onset)
        stimSpk = (neuSpk >= onset(i) - interval(1)) & (neuSpk < (offset(i) + interval(2)));
        stimSpk = neuSpk(stimSpk);
        tmpResp(i,:) = conv(histcounts(stimSpk - onset(i), 0:trialLength), slidingWindow, 'same');
        
        %calculate background
        Background(cont, i) = sum((neuSpk > (onset(i) - interval(1))) & (neuSpk < onset(i)));
    end
    
    %calculate mean response across stimulations
    response = mean(tmpResp, 1) / length(slidingWindow) * 1000;
    
    NeuId(cont) = cont;
    Type{cont} = 'SU';
    ClusterId(cont) = neusGood(n);
    StdDev(cont,:) = std(tmpResp, 0 , 1);
    Channel{cont} = unique(DBGood.spikes(neuIdx, 3));
    
    Psth(cont,:) = response - mean(response);
    

    %calculate response windows by checking peak 0.2 percentage crossing
   if all(response)
        Window(cont, 1) = find(Psth(cont,:) > (max(Psth(cont,:))*0.2), 1);
        Window(cont, 2) = find(Psth(cont,:) < (max(Psth(cont,:))*0.2), 1);
   else
       Window(cont,:) = [0 0];
   end

end

for n = 1:length(neusMua)
    disp(sprintf('analyzing neu %d', n))
    cont = cont+1;
    
    %get index of spikes for each cluster/neuron
    neuIdx = DBMua.spikes(:, 2) == neusMua(n); 
    neuSpk = DBMua.spikes(neuIdx, 1);
    SpikeTime{cont} = neuSpk;
    neuSpk = DBMua.spikes(neuIdx, 1)*1000;

    
    tmpResp = zeros(length(events.onsets), trialLength);
    
    %get onsets and offsets of stimulation events
    onset = events.onsets*1000;
    offset = events.offsets*1000;
    
    %eliminate artifacts (identified as stim picks with a duration <
    %minstimdur)
    if ~isempty(minstimdur)
        testdur = offset - onset;
        idx = find(testdur > minstimdur);
        onset = onset(idx);
        offset = offset(idx);
    end
    

    %find spikes in the interval onset-50 ms and offset+150 ms
    for i = 1:length(onset)
        stimSpk = (neuSpk >= onset(i) - interval(1)) & (neuSpk < (offset(i) + interval(2)));
        stimSpk = neuSpk(stimSpk);
        tmpResp(i,:) = conv(histcounts(stimSpk - onset(i), 0:trialLength), slidingWindow, 'same');
        
        %calculate background
        Background(cont, i) = sum((neuSpk > (onset(i) - interval(1))) & (neuSpk < onset(i)));
    end
    
    %calculate mean response across stimulations
    response = mean(tmpResp, 1) / length(slidingWindow) * 1000;
    
    NeuId(cont) = cont;
    Type{cont} = 'MU';
    ClusterId(cont) = neusMua(n);
    StdDev(cont,:) = std(tmpResp, 0 , 1);
    Channel{cont} = unique(DBMua.spikes(neuIdx, 3));
    
    Psth(cont,:) = response - mean(response);
    
   
    %calculate response windows by checking peak 0.2 percentage crossing
   if all(response)
        Window(cont, 1) = find(Psth(cont,:) > (max(Psth(cont,:))*0.2), 1);
        Window(cont, 2) = find(Psth(cont,:) < (max(Psth(cont,:))*0.2), 1);
   else
       Window(cont,:) = [0 0];
   end
      
end

%build data table
NeuId = NeuId';
Type = Type';
ClusterId = ClusterId';
Channel = Channel';
Background = mean(Background, 2); 
SpikeTime = SpikeTime';

Neurons = table(NeuId, ClusterId, Type, Channel, SpikeTime, Window, Psth, StdDev, Background);

    